// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RateTheRoast.Data;

namespace RateTheRoast.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190620044856_RateTheRoastTables")]
    partial class RateTheRoastTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RateTheRoast.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Handle")
                        .IsRequired();

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedHandle")
                        .IsRequired();

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("StateAbbrev")
                        .IsRequired();

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StateAbbrev");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "ada48f36-1a43-418d-9eb9-0aa1979749bd",
                            AccessFailedCount = 0,
                            City = "Nashville",
                            ConcurrencyStamp = "bca24a23-76b8-41b3-97b7-0be31d29931a",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            Handle = "admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedHandle = "ADMIN",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEF+vFH4DNWNDevRx/sTLdGH3hWwczflYBz6G7LFfSJxw9WtlUlP8d6fASEuU3OFpzA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0e360fde-1184-4e63-972c-d2fafbd2eeea",
                            StateAbbrev = "TN",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "7df8c6f8-5079-4e54-9d17-6cecfd4f01a3",
                            AccessFailedCount = 0,
                            City = "Chattanooga",
                            ConcurrencyStamp = "058779cf-62f5-46b6-9558-eb7bf6d3a8d5",
                            Email = "barnyardbarista@hotmail.com",
                            EmailConfirmed = true,
                            Handle = "BarnyardBarista",
                            LockoutEnabled = false,
                            NormalizedEmail = "BARNYARDBARISTA@HOTMAIL.COM",
                            NormalizedHandle = "BARNYARDBARISTA",
                            NormalizedUserName = "BARNYARDBARISTA@HOTMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPmCZYQUqfHonIQ4GFJ0efamvpHrFyE1XTmRB3oDzLXidGTSwtfxOOYVcfEyuNm1Wg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dccc01ae-54e1-4b05-bfef-486172fb1f07",
                            StateAbbrev = "TN",
                            TwoFactorEnabled = false,
                            UserName = "barnyardbarista@hotmail.com"
                        },
                        new
                        {
                            Id = "b9d0608d-1569-4150-bf19-f2bcd472ecb8",
                            AccessFailedCount = 0,
                            City = "Nashville",
                            ConcurrencyStamp = "ce7e3cfe-9305-478b-8953-2076555f50ce",
                            Email = "info@bongojava.com",
                            EmailConfirmed = true,
                            Handle = "BongoJava",
                            LockoutEnabled = false,
                            NormalizedEmail = "INFO@BONGOJAVA.COM",
                            NormalizedHandle = "BONGOJAVA",
                            NormalizedUserName = "INFO@BONGOJAVA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGAb3TWM5C3YRW7mO5D2IZFSFV594HhpOqEwW8xsX29fbNHSAmFmVpjwjf3mriZT2A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "de7f153a-52bb-44d0-9b73-5925f6773977",
                            StateAbbrev = "TN",
                            TwoFactorEnabled = false,
                            UserName = "info@bongojava.com"
                        });
                });

            modelBuilder.Entity("RateTheRoast.Models.BrewMethod", b =>
                {
                    b.Property<int>("BrewMethodId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Method");

                    b.HasKey("BrewMethodId");

                    b.ToTable("BrewMethod");

                    b.HasData(
                        new
                        {
                            BrewMethodId = 1,
                            Method = "AeroPress"
                        },
                        new
                        {
                            BrewMethodId = 2,
                            Method = "Chemex"
                        },
                        new
                        {
                            BrewMethodId = 3,
                            Method = "Drip coffee maker (non-SCAA certified)"
                        },
                        new
                        {
                            BrewMethodId = 4,
                            Method = "Drip coffee maker (SCAA certified)"
                        },
                        new
                        {
                            BrewMethodId = 5,
                            Method = "French press"
                        },
                        new
                        {
                            BrewMethodId = 6,
                            Method = "Pour over (Kalita Wave, Hario V60, etc.)"
                        },
                        new
                        {
                            BrewMethodId = 7,
                            Method = "SoftBrew"
                        },
                        new
                        {
                            BrewMethodId = 8,
                            Method = "Vacuum pot / Siphon"
                        });
                });

            modelBuilder.Entity("RateTheRoast.Models.Coffee", b =>
                {
                    b.Property<int>("CoffeeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("ImagePath");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Origin")
                        .IsRequired();

                    b.Property<string>("Region");

                    b.Property<int>("RoastIntensityId");

                    b.Property<int>("RoasterId");

                    b.HasKey("CoffeeId");

                    b.HasIndex("RoastIntensityId");

                    b.HasIndex("RoasterId");

                    b.ToTable("Coffee");

                    b.HasData(
                        new
                        {
                            CoffeeId = 1,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A nod to our hometown, lovingly referred to as the Buckle of the Bible Belt. Flavor notes of Brown Sugar, Cocoa, and Baked Pear",
                            Name = "Bible Belt",
                            Origin = "Blend",
                            RoastIntensityId = 1,
                            RoasterId = 1
                        },
                        new
                        {
                            CoffeeId = 2,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "SOTARÁ EDITION | After four lots from Nariño, our Tres Santos tour of Colombia's most exciting growing regions takes us to Cauca, where we have been working since 2016 with a group of 80 smallholder farmers committed to quality. We blended the four best single-farm lots of the bunch for this Tres Santos offering, which comes from the farms of Hover Guevara, Eudaro Garzón, José Chicangana, and Ramón Manzano. Flavor Notes: Apple, Caramel, Baked Lemon",
                            Name = "Colombia Tres Santos",
                            Origin = "Colombia",
                            Region = "Cauca",
                            RoastIntensityId = 2,
                            RoasterId = 4
                        },
                        new
                        {
                            CoffeeId = 3,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ethiopia is where coffee was discovered and these are some of the best organic beans this country has to offer. A floral cup with delicate sweet lemon acidity, strong aroma of bergamont and jasmine flowers. Flavor notes Sweet Citrus Orange and Honeydew",
                            Name = "Ethiopia Yirgacheffe",
                            Origin = "Ethiopia",
                            Region = "Yirgacheffe",
                            RoastIntensityId = 1,
                            RoasterId = 1
                        },
                        new
                        {
                            CoffeeId = 4,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "This is an insanely smooth, balanced coffee, with notes of caramel apples, figs, and cashews throughout. It’s acidity is subtly citrusy, just like a clementine, and it’s sweetness is like strawberry candy.",
                            Name = "El Salvador El Manzano Honey",
                            Origin = "El Salvador",
                            Region = "Santa Ana",
                            RoastIntensityId = 2,
                            RoasterId = 5
                        });
                });

            modelBuilder.Entity("RateTheRoast.Models.Favorite", b =>
                {
                    b.Property<int>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CoffeeId");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("FavoriteId");

                    b.HasIndex("CoffeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorite");

                    b.HasData(
                        new
                        {
                            FavoriteId = 1,
                            CoffeeId = 4,
                            UserId = "7df8c6f8-5079-4e54-9d17-6cecfd4f01a3"
                        });
                });

            modelBuilder.Entity("RateTheRoast.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrewMethodId");

                    b.Property<int>("CoffeeId");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DateEdited");

                    b.Property<string>("Narrative")
                        .IsRequired();

                    b.Property<double>("Price");

                    b.Property<string>("PurchaseAddress");

                    b.Property<string>("PurchaseCity");

                    b.Property<int>("Score");

                    b.Property<string>("StateAbbrev");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("ReviewId");

                    b.HasIndex("BrewMethodId");

                    b.HasIndex("CoffeeId");

                    b.HasIndex("StateAbbrev");

                    b.HasIndex("UserId");

                    b.ToTable("Review");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            BrewMethodId = 6,
                            CoffeeId = 1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Narrative = "The Bible Belt Blend is a signature blend for Bongo Java. I'm a big fan. I taste the brown sugar, cocoa, and baked pear mentioned in Bongo Java's description, but I also enjoy hints of blackberry and molasses. Love this roast's name!",
                            Price = 12.99,
                            PurchaseAddress = "Bongo East",
                            PurchaseCity = "Nashville",
                            Score = 9,
                            StateAbbrev = "TN",
                            UserId = "7df8c6f8-5079-4e54-9d17-6cecfd4f01a3"
                        },
                        new
                        {
                            ReviewId = 2,
                            BrewMethodId = 6,
                            CoffeeId = 4,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Narrative = "I've said it before, and I'll say it again, Frothy Monkey's single origin coffees are underrated. The El Salvador El Manzano Honey gives me apple, orange, and fig. It's also a little nutty, just like me. ",
                            Price = 15.99,
                            PurchaseAddress = "The Turnip Truck",
                            PurchaseCity = "Nashville",
                            Score = 9,
                            StateAbbrev = "TN",
                            UserId = "7df8c6f8-5079-4e54-9d17-6cecfd4f01a3"
                        });
                });

            modelBuilder.Entity("RateTheRoast.Models.RoastIntensity", b =>
                {
                    b.Property<int>("RoastIntensityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Intensity");

                    b.HasKey("RoastIntensityId");

                    b.ToTable("RoastIntensity");

                    b.HasData(
                        new
                        {
                            RoastIntensityId = 1,
                            Intensity = "Light"
                        },
                        new
                        {
                            RoastIntensityId = 2,
                            Intensity = "Medium-Light"
                        },
                        new
                        {
                            RoastIntensityId = 3,
                            Intensity = "Medium"
                        },
                        new
                        {
                            RoastIntensityId = 4,
                            Intensity = "Medium-Dark"
                        },
                        new
                        {
                            RoastIntensityId = 5,
                            Intensity = "Dark"
                        });
                });

            modelBuilder.Entity("RateTheRoast.Models.Roaster", b =>
                {
                    b.Property<int>("RoasterId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<string>("ImagePath");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("StateAbbrev")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("RoasterId");

                    b.HasIndex("StateAbbrev");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Roaster");

                    b.HasData(
                        new
                        {
                            RoasterId = 1,
                            City = "Nashville",
                            Name = "Bongo Java",
                            StateAbbrev = "TN",
                            UserId = "b9d0608d-1569-4150-bf19-f2bcd472ecb8"
                        },
                        new
                        {
                            RoasterId = 2,
                            City = "Birmingham",
                            Name = "Revelator Coffee Company",
                            StateAbbrev = "AL"
                        },
                        new
                        {
                            RoasterId = 3,
                            City = "New Orleans",
                            Name = "Folgers",
                            StateAbbrev = "LA"
                        },
                        new
                        {
                            RoasterId = 4,
                            City = "Chicago",
                            Name = "Intelligentsia",
                            StateAbbrev = "IL"
                        },
                        new
                        {
                            RoasterId = 5,
                            City = "Nashville",
                            Name = "Frothy Monkey",
                            StateAbbrev = "TN"
                        });
                });

            modelBuilder.Entity("RateTheRoast.Models.State", b =>
                {
                    b.Property<string>("StateAbbrev")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("StateName");

                    b.HasKey("StateAbbrev");

                    b.ToTable("State");

                    b.HasData(
                        new
                        {
                            StateAbbrev = "AL",
                            StateName = "Alabama"
                        },
                        new
                        {
                            StateAbbrev = "AK",
                            StateName = "Alaska"
                        },
                        new
                        {
                            StateAbbrev = "AZ",
                            StateName = "Arizona"
                        },
                        new
                        {
                            StateAbbrev = "AR",
                            StateName = "Arkansas"
                        },
                        new
                        {
                            StateAbbrev = "CA",
                            StateName = "California"
                        },
                        new
                        {
                            StateAbbrev = "CO",
                            StateName = "Colorado"
                        },
                        new
                        {
                            StateAbbrev = "CT",
                            StateName = "Connecticut"
                        },
                        new
                        {
                            StateAbbrev = "DE",
                            StateName = "Delaware"
                        },
                        new
                        {
                            StateAbbrev = "FL",
                            StateName = "Florida"
                        },
                        new
                        {
                            StateAbbrev = "GA",
                            StateName = "Georgia"
                        },
                        new
                        {
                            StateAbbrev = "HI",
                            StateName = "Hawaii"
                        },
                        new
                        {
                            StateAbbrev = "ID",
                            StateName = "Idaho"
                        },
                        new
                        {
                            StateAbbrev = "IL",
                            StateName = "Illinois"
                        },
                        new
                        {
                            StateAbbrev = "IN",
                            StateName = "Indiana"
                        },
                        new
                        {
                            StateAbbrev = "IA",
                            StateName = "Iowa"
                        },
                        new
                        {
                            StateAbbrev = "KS",
                            StateName = "Kansas"
                        },
                        new
                        {
                            StateAbbrev = "KY",
                            StateName = "Kentucky"
                        },
                        new
                        {
                            StateAbbrev = "LA",
                            StateName = "Louisiana"
                        },
                        new
                        {
                            StateAbbrev = "ME",
                            StateName = "Maine"
                        },
                        new
                        {
                            StateAbbrev = "MD",
                            StateName = "Maryland"
                        },
                        new
                        {
                            StateAbbrev = "MA",
                            StateName = "Massachusetts"
                        },
                        new
                        {
                            StateAbbrev = "MI",
                            StateName = "Michigan"
                        },
                        new
                        {
                            StateAbbrev = "MN",
                            StateName = "Minnesota"
                        },
                        new
                        {
                            StateAbbrev = "MS",
                            StateName = "Mississippi"
                        },
                        new
                        {
                            StateAbbrev = "MO",
                            StateName = "Missouri"
                        },
                        new
                        {
                            StateAbbrev = "MT",
                            StateName = "Montana"
                        },
                        new
                        {
                            StateAbbrev = "NE",
                            StateName = "Nebraska"
                        },
                        new
                        {
                            StateAbbrev = "NV",
                            StateName = "Nevada"
                        },
                        new
                        {
                            StateAbbrev = "NH",
                            StateName = "New Hampshire"
                        },
                        new
                        {
                            StateAbbrev = "NJ",
                            StateName = "New Jersey"
                        },
                        new
                        {
                            StateAbbrev = "NM",
                            StateName = "New Mexico"
                        },
                        new
                        {
                            StateAbbrev = "NY",
                            StateName = "New York"
                        },
                        new
                        {
                            StateAbbrev = "NC",
                            StateName = "North Carolina"
                        },
                        new
                        {
                            StateAbbrev = "ND",
                            StateName = "North Dakota"
                        },
                        new
                        {
                            StateAbbrev = "OH",
                            StateName = "Ohio"
                        },
                        new
                        {
                            StateAbbrev = "OK",
                            StateName = "Oklahoma"
                        },
                        new
                        {
                            StateAbbrev = "OR",
                            StateName = "Oregon"
                        },
                        new
                        {
                            StateAbbrev = "PA",
                            StateName = "Pennsylvania"
                        },
                        new
                        {
                            StateAbbrev = "RI",
                            StateName = "Rhode Island"
                        },
                        new
                        {
                            StateAbbrev = "SC",
                            StateName = "South Carolina"
                        },
                        new
                        {
                            StateAbbrev = "SD",
                            StateName = "South Dakota"
                        },
                        new
                        {
                            StateAbbrev = "TN",
                            StateName = "Tennessee"
                        },
                        new
                        {
                            StateAbbrev = "TX",
                            StateName = "Texas"
                        },
                        new
                        {
                            StateAbbrev = "UT",
                            StateName = "Utah"
                        },
                        new
                        {
                            StateAbbrev = "VT",
                            StateName = "Vermont"
                        },
                        new
                        {
                            StateAbbrev = "VA",
                            StateName = "Virgina"
                        },
                        new
                        {
                            StateAbbrev = "WA",
                            StateName = "Washington"
                        },
                        new
                        {
                            StateAbbrev = "WV",
                            StateName = "West Virginia"
                        },
                        new
                        {
                            StateAbbrev = "WI",
                            StateName = "Wisconsin"
                        },
                        new
                        {
                            StateAbbrev = "WY",
                            StateName = "Wyoming"
                        });
                });

            modelBuilder.Entity("RateTheRoast.Models.Wishlist", b =>
                {
                    b.Property<int>("WishlistId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CoffeeId");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("WishlistId");

                    b.HasIndex("CoffeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Wishlist");

                    b.HasData(
                        new
                        {
                            WishlistId = 1,
                            CoffeeId = 2,
                            UserId = "7df8c6f8-5079-4e54-9d17-6cecfd4f01a3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RateTheRoast.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RateTheRoast.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RateTheRoast.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RateTheRoast.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RateTheRoast.Models.ApplicationUser", b =>
                {
                    b.HasOne("RateTheRoast.Models.State", "State")
                        .WithMany("Users")
                        .HasForeignKey("StateAbbrev")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RateTheRoast.Models.Coffee", b =>
                {
                    b.HasOne("RateTheRoast.Models.RoastIntensity", "RoastIntensity")
                        .WithMany("Coffees")
                        .HasForeignKey("RoastIntensityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RateTheRoast.Models.Roaster", "Roaster")
                        .WithMany("Coffees")
                        .HasForeignKey("RoasterId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RateTheRoast.Models.Favorite", b =>
                {
                    b.HasOne("RateTheRoast.Models.Coffee", "Coffee")
                        .WithMany("Favorites")
                        .HasForeignKey("CoffeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RateTheRoast.Models.ApplicationUser", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RateTheRoast.Models.Review", b =>
                {
                    b.HasOne("RateTheRoast.Models.BrewMethod", "BrewMethod")
                        .WithMany("Reviews")
                        .HasForeignKey("BrewMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RateTheRoast.Models.Coffee", "Coffee")
                        .WithMany("Reviews")
                        .HasForeignKey("CoffeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RateTheRoast.Models.State", "State")
                        .WithMany("Reviews")
                        .HasForeignKey("StateAbbrev");

                    b.HasOne("RateTheRoast.Models.ApplicationUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RateTheRoast.Models.Roaster", b =>
                {
                    b.HasOne("RateTheRoast.Models.State", "State")
                        .WithMany("Roasters")
                        .HasForeignKey("StateAbbrev")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RateTheRoast.Models.ApplicationUser", "User")
                        .WithOne("Roaster")
                        .HasForeignKey("RateTheRoast.Models.Roaster", "UserId");
                });

            modelBuilder.Entity("RateTheRoast.Models.Wishlist", b =>
                {
                    b.HasOne("RateTheRoast.Models.Coffee", "Coffee")
                        .WithMany("Wishlists")
                        .HasForeignKey("CoffeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RateTheRoast.Models.ApplicationUser", "User")
                        .WithMany("Wishlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
